// This exapmle shows a problem in checking the environment.
// When we compose inv and mux to get a composed conract
// From the semantic of composition, if we provide an environment that 
// all environment of two components are satisfied (either from our provided enviroment or 
// through the guarantee of the other component, we guarantee both componenets' behavior) 
// But we don't have "any constraints" on the environment where only one holds.
// In this case we should still able to say that one guarantee holds.

// High-Level thought: The accpetable environment is too strict for composition?
// We should allow partial guarantees for certain environments
// : Given (E1 and !E2), we should still achieve G1?
// Revise Contract Composition semantic? Maybe we need to specify that the composed component's 
// partial behaviors under the partial environments

// Second thought: maybe we will need a new operator that equivalent to operator-(C1, C2) = 
// A: (A1 or A2), G: (A1 ==> G1) and (G2 ==> G2)
// The composition now becomes (A: A1 and A2 or !G1 or !G2, G: G1 and G2) - (A1, G1) - (A2, G2)
module inv {
    
    input a : integer;
    output b : integer;

    // Sub-formulas
    define A() : boolean
    = (a != 0);
    define G() : boolean
    = (b == 1 / a);
    init {
        b = 1 / a;
    }

    next {
        b' = 1 / a';
    }

    contract C : assume_guarantee((A()), (G()));
    // Need a pass to transpile into the following:
    // property C : A(a, b) ==> G(a, b);

    control {
        print_module;
        v = ag;
        //v = induction;

        check;
        print_results;
        v.print_cex;
    }
}

module mux{
    input a : integer;
    input b : integer;
    output c: integer;
    input inst: boolean;

    define A(): boolean =  true;
    define G(): boolean =  (inst ==> c == a) && (!inst ==> c == b);

    init{
        if(inst){
            c = a;
        }
        else {
            c = b;
        }
    }

    next{
        if(inst){
            c' = a';
        }
        else {
            c' = b';
        }
    }

    contract C : assume_guarantee((A()), (G()));

    control{
        print_module;
        v = ag;
        //v = induction;
        check;
        print_results;
        v.print_cex;
    }
}

module sys {
    
    input a : integer;
    input b : integer;
    input inst: boolean;

    var wire : integer;

    output ret: integer;

    instance _inv : inv(a : (a), b: (wire));
    instance _mux : mux(a : (wire), b: (a), c: (ret), inst:(inst));

    // Expected invalid.
    //define A() : boolean = true;
    //define G() : boolean = (inst ==> ret == a + b) && (!inst ==> ret == a / b);


    // Expected valid!! false path problem!!
    define A() : boolean = !(a == 0 && inst == true);
    define G() : boolean = (inst ==> ret == 1 / a) && (!inst ==> ret == a);

    // Expected valid
    //define A() : boolean = !(b == 0);
    //define G() : boolean = (inst ==> ret == a + b) && (!inst ==> ret == a / b);

    init {
    }

    next {
        next(_inv);
        next(_mux);
    }

    contract C : assume_guarantee((A()), (G()));
    //property C: ((inst == true) ==> ((ret == (a + b)) || !((inst == true))));
    // Two questions:
    // 1. How to express composition of m1 and m2's contracts?
    // define G_m1_m2() : boolean = (_m1.b > 0 && _m2.b == _m2.a + 1);
    // define A_m1_m2() : boolean = ((_m1.a < 0) && (true)) || !G_m1_m2();
    // define G_m1_m2() : boolean = (wire > 0 && b == wire + 1);
    // define A_m1_m2() : boolean = ((a < 0) && (true)) || !G_m1_m2();

    // 2. How to check the composed contract satisfy the system-level contract?
    // property A_is_refinement : A() ==> A_m1_m2();
    // property G_is_refinement : G_m1_m2() ==> G();

    control {
        print_module;
        v = ag;
        //v = induction;
        check;
        print_results;
        v.print_cex;
    }
}

