module m1 {
    
    input a : integer;
    input b : integer;
    output c: integer;

    // Sub-formulas
    define A(a : integer, b : integer, c: integer) : boolean
    = true;
    define G(a : integer, b : integer, c: integer) : boolean
    = c == a + b;

    contract C : assume_guarantee((A(a, b, c)), (G(a, b, c)));
    // Need a pass to transpile into the following:
    // property C : A(a, b) ==> G(a, b);

    control {
        print_module;
        v = ag[contracts=[C]];
        //prove_by_contracts;
        //v = induction;

        check;
        print_results;
        v.print_cex;
    }
}

module m2 {
    
    input a : integer;
    input b : integer;
    output c : integer;

    // Sub-formulas
    define A(a : integer, b : integer, c: integer) : boolean
    = b != 0;
    define G(a : integer, b : integer, c: integer) : boolean
    = c == a / b;


    contract C : assume_guarantee((A(a, b, c)), (G(a, b, c)));
    // Need a pass to transpile into the following:
    // property C : A(a, b) ==> G(a, b);

    control {
        print_module;
        v = ag;
        //v = induction;

        check;
        print_results;
        v.print_cex;
    }
}

module m3{
    input a : integer;
    input b : integer;
    output c: integer;
    input inst: boolean;

    define A(): boolean =  true;
    define G(): boolean =  (inst ==> c == a) && (!inst ==> c == b);

    contract C : assume_guarantee((A()), (G()));

    control{
        print_module;
        v = ag;
        //v = induction;
        check;
        print_results;
        v.print_cex;
    }
}

module M {
    
    input a : integer;
    input b : integer;
    input inst: boolean;

    var wire : integer;
    var wire2 : integer;

    output ret: integer;

    instance _m1 : m1(a : (a), b : (b), c: (wire));
    instance _m2 : m2(a : (a), b : (b), c: (wire2));
    instance _m3 : m3(a : (wire), b: (wire2), c: (ret), inst:(inst));

    // Expected invalid.
    //define A() : boolean = true;
    //define G() : boolean = (inst ==> ret == a + b) && (!inst ==> ret == a / b);


    // Expected valid!! false path problem!!
    //define A() : boolean = !(b == 0 && inst == false);
    //define G() : boolean = (inst ==> ret == a + b) && (!inst ==> ret == a / b);

    // Expected valid
    define A() : boolean = true;
    define G() : boolean = (inst ==> ret == a + b) && (!inst ==> ret == a / b);

    init {
    }

    // In order for the high-level module to respect contract
    // composition, we need to restrict how it is written.
    // For example, if only either of m1 and m2 steps, then
    // the composition does not respect the semantics of
    // contract composition.
    next {
        next(_m1);
        next(_m2);
        next(_m3);
    }

    contract C : assume_guarantee((A()), (G()));
    //property C: ((inst == true) ==> ((ret == (a + b)) || !((inst == true))));
    // Two questions:
    // 1. How to express composition of m1 and m2's contracts?
    // define G_m1_m2() : boolean = (_m1.b > 0 && _m2.b == _m2.a + 1);
    // define A_m1_m2() : boolean = ((_m1.a < 0) && (true)) || !G_m1_m2();
    // define G_m1_m2() : boolean = (wire > 0 && b == wire + 1);
    // define A_m1_m2() : boolean = ((a < 0) && (true)) || !G_m1_m2();

    // 2. How to check the composed contract satisfy the system-level contract?
    // property A_is_refinement : A() ==> A_m1_m2();
    // property G_is_refinement : G_m1_m2() ==> G();

    control {
        print_module;
        v = ag;
        //v = induction;
        check;
        print_results;
        v.print_cex;
    }
}

