/**
 * The assumptions on the environment are assumed to be static
 * and hold since the beginning of the trace. In some sense,
 * we can interpret it as static environment.
 */
module main {
    
    type    * = common.*;
    define  * = common.*;
    const   * = common.*;

    // Trace declaration and axioms
    var trace : trace_t;

    // Environment variables
    var goodWeather : boolean;

    // Display trace in timestamp order
    axiom(forall (i, j : integer) :: (i < j && in_range(i) && in_range(j)) 
        ==> (tag_earlier(g(elem(i)), g(elem(j)))
            || tag_same(g(elem(i)), g(elem(j)))));

    // All microsteps are non-negative
    axiom(forall (i : integer) :: in_range(i)
        ==> pi2(g(elem(i))) >= 0);

    // NULL events should appear in the suffix
    axiom(forall (j : integer) :: in_range(j) ==> (
        (p1(elem(j)) != NULL) ==> (forall (i : integer) :: in_range(i) ==> 
        ((i < j) ==> p1(elem(i)) != NULL)
    )));

    // All tags should be positive
    axiom(forall (i : integer) :: in_range(i) ==> (
        !tag_earlier(g(elem(i)), zero())
    ));

    // STARTUP only appears once.
    axiom(forall (i : integer) :: (p1(elem(i)) == Door1_STARTUP && in_range(i))
        ==> !(exists (j : integer) :: p1(elem(j)) == Door1_STARTUP
            && i < j));
    axiom(forall (i : integer) :: (p1(elem(i)) == Door2_STARTUP && in_range(i))
        ==> !(exists (j : integer) :: p1(elem(j)) == Door2_STARTUP
            && i < j));

    // Element helper that shortens property
    define elem(i : integer) : element_t
    = get(trace, i);

    // Helper predicates
    define phi_0(e : element_t) : boolean
    = p1(e) == Door1_STARTUP && tag_same(g(e), zero()); 

    define phi_1(e : element_t) : boolean
    = p1(e) == Door2_STARTUP && tag_same(g(e), zero()); 

    /*************************
     * System-Level Contract *
     *************************/
    define Sys_A() : boolean
    = true;

    // Given that both ramp exists, at startup, the door eventually opens.
    // LTL: ramp_exists ==> F(Door1_C_s && Door2_C_s)
    define Sys_G() : boolean
    = forall (x1, x2, z1, z2 : integer) :: (
        in_range(x1) && in_range(x2) && in_range(z1) && in_range(z2)
        && !tag_later(g(elem(x1)), g(elem(z1))) // No later than STARTUP
        && !tag_later(g(elem(x2)), g(elem(z2))) // No later than STARTUP
        && p1(elem(x1)) == Door1_B_ramp_exists
        && p1(elem(x2)) == Door2_B_ramp_exists
        && val(elem(x1)) == true
        && val(elem(x2)) == true
        && phi_0(elem(z1))
        && phi_1(elem(z2))
        )
        ==> (exists (y1, y2 : integer) :: (
        in_range(y1) && in_range(y2)
        && !tag_earlier(g(elem(y1)), g(elem(x1)))
        && !tag_earlier(g(elem(y2)), g(elem(x2)))
        && p1(elem(y1)) == Door1_C_s
        && p1(elem(y2)) == Door2_C_s
        && val(elem(y1)) == true
        && val(elem(y2)) == true
        ))
        || !Sys_A();

    /*****************************
     * Component-level Contracts *
     *****************************/
    define Door1_A() : boolean
    = true;

    define Door1_G() : boolean
    = forall (x, z : integer) :: (
        in_range(x) && in_range(z)
        && !tag_later(g(elem(x)), g(elem(z))) // No later than STARTUP
        && p1(elem(x)) == Door1_B_ramp_exists
        && val(elem(x)) == true
        && phi_0(elem(z))
        )
        ==> (exists (y : integer) :: (
        in_range(y)
        && !tag_earlier(g(elem(y)), g(elem(x)))
        && p1(elem(y)) == Door1_C_s
        && val(elem(y)) == true
        ))
        || !Door1_A();

    define Door2_A() : boolean
    = true;

    define Door2_G() : boolean
    = forall (x, z : integer) :: (
        in_range(x) && in_range(z)
        && !tag_later(g(elem(x)), g(elem(z))) // No later than STARTUP
        && p1(elem(x)) == Door2_B_ramp_exists
        && val(elem(x)) == true
        && phi_0(elem(z))
        )
        ==> (exists (y : integer) :: (
        in_range(y)
        && !tag_earlier(g(elem(y)), g(elem(x)))
        && p1(elem(y)) == Door2_C_s
        && val(elem(y)) == true
        ))
        || !Door2_A();

    /***************************************
     * Verification by Checking Refinement *
     ***************************************/
    define _refine_A() : boolean = 
    Sys_A() ==>
    (
        Door1_A() && Door2_A()
    );

    define _refine_G() : boolean =
    (
        Door1_G() && Door2_G()
    )
    ==> Sys_G();

    property refine_A : _refine_A();
    property refine_G : _refine_G();
    property refine_C : _refine_A() && _refine_G();

    control {
        v = unroll(0);
        check;
        print_results;
        v.print_cex;
    }
}
