module main {
    
    type * = common.*;
    define * = common.*;
    const * = common.*;

    var trace_A : trace_t;
    var trace_B : trace_t;
    var trace_C : trace_t;

    // Derive axioms from the static information of the program.
    // Tag should appear in increasing order for a timeline.
    axiom(forall (i, j : step_t) :: (i < j && in_range(i) && in_range(j)) 
        ==> (tag_earlier(g(get(trace_A, i)), g(get(trace_A, j)))
            || tag_same(g(get(trace_A, i)), g(get(trace_A, j)))));
    axiom(forall (i, j : step_t) :: (i < j && in_range(i) && in_range(j)) 
        ==> (tag_earlier(g(get(trace_B, i)), g(get(trace_B, j)))
            || tag_same(g(get(trace_B, i)), g(get(trace_B, j)))));
    axiom(forall (i, j : step_t) :: (i < j && in_range(i) && in_range(j)) 
        ==> (tag_earlier(g(get(trace_C, i)), g(get(trace_C, j)))
            || tag_same(g(get(trace_C, i)), g(get(trace_C, j)))));

    // Timestamp and microstep should be non-negative.
    axiom(forall (i : step_t) :: in_range(i)
        ==> (pi1(g(get(trace_A, i))) >= 0 && pi2(g(get(trace_A, i))) >= 0));
    axiom(forall (i : step_t) :: in_range(i)
        ==> (pi1(g(get(trace_B, i))) >= 0 && pi2(g(get(trace_B, i))) >= 0));
    axiom(forall (i : step_t) :: in_range(i)
        ==> (pi1(g(get(trace_C, i))) >= 0 && pi2(g(get(trace_C, i))) >= 0));
        
    // Each reactor only invokes its own reactions.
    axiom(forall (i : step_t) :: in_range(i) ==> N(get(trace_A, i)) == A2);
    axiom(forall (j : step_t) :: in_range(j) ==> N(get(trace_B, j)) == B1);
    axiom(forall (k : step_t) :: in_range(k) ==> N(get(trace_C, k)) == C1);

    // Connections
    axiom(forall (i : step_t) :: N(get(trace_A, i)) == A2
        ==> (exists (j : step_t) :: N(get(trace_B, j)) == B1
            && g(get(trace_B, j)) == tag_delay(g(get(trace_A, i)), rxn_delay(A2, B1))));
    axiom(forall (i : step_t) :: N(get(trace_B, i)) == B1
        ==> (exists (j : step_t) :: N(get(trace_C, j)) == C1
            && g(get(trace_C, j)) == tag_delay(g(get(trace_B, i)), rxn_delay(B1, C1))));
    
    // Same reaction cannot invoke twice in the same instant
    axiom(forall (i, j : step_t) :: (in_range(i) && in_range(j))
        ==> (i != j ==> ((N(get(trace_A, i)) == N(get(trace_A, j))
            ==> g(get(trace_A, i)) != g(get(trace_A, j))))));
    axiom(forall (i, j : step_t) :: (in_range(i) && in_range(j))
        ==> (i != j ==> ((N(get(trace_B, i)) == N(get(trace_B, j))
            ==> g(get(trace_B, i)) != g(get(trace_B, j))))));
    axiom(forall (i, j : step_t) :: (in_range(i) && in_range(j))
        ==> (i != j ==> ((N(get(trace_C, i)) == N(get(trace_C, j))
            ==> g(get(trace_C, i)) != g(get(trace_C, j))))));


    property prop : forall (i, j : step_t) ::
        (in_range(i) && in_range(j))
            ==> (invoke_before(get(trace_A, i), get(trace_C, j)))
                ==> (exists (k : step_t) ::
                    invoke_before(get(trace_A, i), get(trace_B, k))
                    && invoke_before(get(trace_B, k), get(trace_C, j)));


    control {
        v = unroll(0);
        check;
        print_results;
        v.print_cex();
    }
}
