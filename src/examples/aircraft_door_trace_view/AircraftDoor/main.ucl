/**
 * The assumptions on the environment are assumed to be static
 * and hold since the beginning of the trace. In some sense,
 * we can interpret it as static environment.
 */
module main {
    
    type    * = common.*;
    define  * = common.*;
    const   * = common.*;

    // Trace declaration and axioms
    var trace : trace_t;

    // Environment variables
    var rampExists : boolean;

    // Display trace in timestamp order
    axiom(forall (i, j : integer) :: (i < j && in_range(i) && in_range(j)) 
        ==> (tag_earlier(g(elem(i)), g(elem(j)))
            || tag_same(g(elem(i)), g(elem(j)))));

    // All microsteps are positive
    axiom(forall (i : integer) :: in_range(i)
        ==> pi2(g(elem(i))) >= 0);

    // NULL events should appear in the suffix
    axiom(forall (j : integer) :: in_range(j) ==> (
        (p1(elem(j)) != NULL) ==> (forall (i : integer) :: in_range(i) ==> 
        ((i < j) ==> p1(elem(i)) != NULL)
    )));

    // All tags should be positive
    axiom(forall (i : integer) :: in_range(i) ==> (
        !tag_earlier(g(elem(i)), zero())
    ));

    // Display simulatenous elements in certain order
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j)) ==> (
        (tag_same(g(elem(i)), g(elem(j)))
            && p1(elem(i)) == STARTUP
            && p1(elem(j)) == A1)
        ==> i < j
    ));
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j)) ==> (
        (tag_same(g(elem(i)), g(elem(j)))
            && p1(elem(i)) == A1
            && p1(elem(j)) == A_out)
        ==> i < j
    ));
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j)) ==> (
        (tag_same(g(elem(i)), g(elem(j)))
            && p1(elem(i)) == A_out
            && p1(elem(j)) == B_in)
        ==> i < j
    ));
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j)) ==> (
        (tag_same(g(elem(i)), g(elem(j)))
            && p1(elem(i)) == B_in
            && p1(elem(j)) == B1)
        ==> i < j
    ));
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j)) ==> (
        (tag_same(g(elem(i)), g(elem(j)))
            && p1(elem(i)) == B1
            && p1(elem(j)) == B_out)
        ==> i < j
    ));
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j)) ==> (
        (tag_same(g(elem(i)), g(elem(j)))
            && p1(elem(i)) == B_out
            && p1(elem(j)) == C_in)
        ==> i < j
    ));
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j)) ==> (
        (tag_same(g(elem(i)), g(elem(j)))
            && p1(elem(i)) == C_in
            && p1(elem(j)) == C1)
        ==> i < j
    ));
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j)) ==> (
        (tag_same(g(elem(i)), g(elem(j)))
            && p1(elem(i)) == C1
            && p1(elem(j)) == C_s)
        ==> i < j
    ));

    // STARTUP only appears once.
    axiom(forall (i : integer) :: (p1(elem(i)) == STARTUP && in_range(i))
        ==> !(exists (j : integer) :: p1(elem(j)) == STARTUP
            && i < j));

    // Triggers appear before reactions at the same logical time.
    axiom(forall (j : integer) :: (p1(elem(j)) == A1 && in_range(j))
        ==> (exists (i : integer) :: p1(elem(i)) == STARTUP
            && tag_same(g(elem(i)), g(elem(j)))
            && i < j));
    axiom(forall (j : integer) :: (p1(elem(j)) == B1 && in_range(j))
        ==> (exists (i : integer) :: p1(elem(i)) == B_in
            && tag_same(g(elem(i)), g(elem(j)))
            && i < j));
    axiom(forall (j : integer) :: (p1(elem(j)) == C1 && in_range(j))
        ==> (exists (i : integer) :: p1(elem(i)) == C_in
            && tag_same(g(elem(i)), g(elem(j)))
            && i < j));

    // Element helper that shortens property
    define elem(i : integer) : element_t
    = get(trace, i);

    // Helper predicates
    define phi_0(e : element_t) : boolean
    = p1(e) == STARTUP && tag_same(g(e), zero()); 

    define phi_1(e : element_t) : boolean
    = p1(e) == A1;

    define phi_2p(e : element_t) : boolean
    = true;

    define phi_2q(e : element_t) : boolean
    = exists (_i : integer) :: in_range(_i)
        && p1(elem(_i)) == A_out
        && val(elem(_i)) == true
        && tag_same(g(elem(_i)), g(e));

    define phi_3(e : element_t) : boolean
    = forall (_i : integer) :: in_range(_i)
        ==> ((
            p1(elem(_i)) == A_out
            && tag_same(g(elem(_i)), g(e))
        ) ==> (
            exists (_j : integer) :: (
                p1(elem(_j)) == B_in
                && val(elem(_i)) == val(elem(_j))
                && tag_same(g(elem(_i)), g(elem(_j)))
            )
        ));

    define phi_4(e : element_t) : boolean
    = p1(e) == B1;

    define phi_5p(e : element_t) : boolean
    = exists (_i : integer) :: in_range(_i)
        && p1(elem(_i)) == B_ramp_exists
        && val(elem(_i)) == true
        && !tag_later(g(elem(_i)), g(e));

    define phi_5q(e : element_t) : boolean
    = forall (_i : integer) :: in_range(_i)
        ==> ((
            p1(elem(_i)) == B_in
            && tag_same(g(elem(_i)), g(e))
        ) ==> (
            exists (_j : integer) :: (
                p1(elem(_j)) == B_out
                && val(elem(_i)) == val(elem(_j))
                && tag_same(g(elem(_i)), g(elem(_j)))
            )
        ));

    // Note: elements in the trace already represent "present" values
    define phi_6(e : element_t) : boolean
    = p1(e) == B_in;

    define phi_7(e : element_t) : boolean
    = forall (_i : integer) :: in_range(_i)
        ==> ((
            p1(elem(_i)) == B_out
            && tag_same(g(elem(_i)), g(e))
        ) ==> (
            exists (_j : integer) :: (
                p1(elem(_j)) == C_in
                && val(elem(_i)) == val(elem(_j))
                && tag_same(g(elem(_i)), g(elem(_j)))
            )
        ));

    define phi_8(e : element_t) : boolean
    = p1(e) == C1;

    define phi_9p(e : element_t) : boolean
    = true; 

    define phi_9q(e : element_t) : boolean
    = forall (_i : integer) :: in_range(_i)
        ==> ((
            p1(elem(_i)) == C_in
            && tag_same(g(elem(_i)), g(e))
        ) ==> (
            exists (_j : integer) :: (
                p1(elem(_j)) == C_s
                && val(elem(_i)) == val(elem(_j))
                && tag_same(g(elem(_i)), g(elem(_j)))
            )
        ));

    define phi_10(e : element_t) : boolean
    = p1(e) == C_in;

    /*************************
     * System-Level Contract *
     *************************/
    define Sys_A() : boolean
    = phi_5p(elem(0));

    define Relaxed_sys_A() : boolean
    = true;

    define Sys_G() : boolean
    = exists (x : integer) :: in_range(x)
        && !tag_earlier(g(elem(x)), zero())
        && p1(elem(x)) == C_s
        && val(elem(x)) == true;

    define Relaxed_sys_G() : boolean
    = (!tag_earlier(g(elem(0)), zero())
        && p1(elem(0)) == B_ramp_exists
        && val(elem(0)) == true)
        ==> (
        exists (y : integer) :: in_range(y)
        && !tag_earlier(g(elem(y)), g(elem(0)))
        && p1(elem(y)) == C_s
        && val(elem(y)) == true
        );

    /*****************************
     * Component-level Contracts *
     *****************************/
    define _A1() : boolean
    = true;
    define G1() : boolean
    = exists (v : integer) :: phi_0(elem(v));

    define A2() : boolean
    = phi_2p(elem(0));
    define G2() : boolean
    = forall (_u : integer) :: in_range(_u) ==> 
        (((phi_0(elem(_u))) ==> (exists (_v : integer) ::
            in_range(_v)
            && tag_same(g(elem(_v)), g(elem(_u)))
            && phi_1(elem(_v))
            )) 
        && (phi_1(elem(_u)) ==> phi_2q(elem(_u))) 
    );

    define A3() : boolean
    = true;
    define G3() : boolean
    = forall (u : integer) :: in_range(u) ==>
        (phi_3(elem(u)));

    // Moving the precondition of reaction to A.
    // FIXME: Verify that this is okay.
    // FIXME: Seems to suggest that this way of writing assumptions
    //        is only sound for static environments.
    //        The following might be hard to express:
    //        Assuming an element in the trace satisfies phi,
    //        the component makes a guarantee that refers to
    //        that element in the assumption.
    //        For example, the assumption can say "the component
    //        satisfies the guarantee WHEN certain predicate phi is true."
    //        
    //        A: exists (i : integer) :: phi(elem(i)) == true
    //        G: forall (i : integer) :: (phi(elem(i)) == true) ==> do_something
    define A4() : boolean
    = phi_5p(elem(0));
    define G4() : boolean
    = forall (_u : integer) :: in_range(_u) ==> 
        (((phi_6(elem(_u))) ==> (exists (_v : integer) ::
            in_range(_v)
            && tag_same(g(elem(_v)), g(elem(_u)))
            && phi_4(elem(_v)))) 
        && (phi_4(elem(_u)) ==> phi_5q(elem(_u))) 
    );

    define A5() : boolean
    = true;
    define G5() : boolean
    = forall (u : integer) :: in_range(u) ==>
        (phi_7(elem(u)));

    define A6() : boolean
    = phi_9p(elem(0));
    define G6() : boolean
    = forall (_u : integer) :: in_range(_u) ==> 
        (((phi_10(elem(_u))) ==> (exists (_v : integer) ::
            in_range(_v)
            && tag_same(g(elem(_v)), g(elem(_u)))
            && phi_8(elem(_v)))) 
        && (phi_8(elem(_u)) ==> phi_9q(elem(_u))) 
    );

    /***************************************
     * Verification by Checking Refinement *
     ***************************************/
    define _refine_A() : boolean = 
    Sys_A() ==>
    // Since Sys_A is more demanding,
    // using Relaxed_sys_A might not imply the composed A.
    // Try by commenting out Sys_A and uncommenting the following:
    // Relaxed_sys_A() ==>
    (
        _A1() && A2() && A3() && A4() && A5() && A6()
    );

    define _refine_G() : boolean =
    (
        G1() && G2() && G3() && G4() && G5() && G6()
    )
    ==> Sys_G();
    // Since Sys_spec is more demanding,
    // the composed G must also satisfy Relaxed_sys_spec.
    // Try by commenting out Sys_G uncommenting the following:
    // ==> Relaxed_sys_G(); 

    property refine_A : _refine_A();
    property refine_G : _refine_G();
    property refine_C : _refine_A() && _refine_G();

    control {
        v = unroll(0);
        check;
        print_results;
        v.print_cex;
    }
}
